# version: '3.8'

# services:
#   backend:
#     container_name: backend
#     image: backendcolocation:latest
#     build:
#       context: ./Backend/Project_Colocation_Management
#       dockerfile: Dockerfile
#     ports:
#       - "9090:9090"
#     environment:
#       spring.datasource.url: jdbc:mysql://mysql:3306/colection_management?useUnicode=true&useJDBCCompliantTimezoneShift=true&createDatabaseIfNotExist=true&useLegacyDatetimeCode=false&serverTimezone=UTC
#       spring.datasource.username: root
#       spring.datasource.password: root
#     depends_on:
#       - mysql
#     networks:
#       - back-network

#   frontend:
#     container_name: frontend
#     image: angularcolocation:latest
#     build:
#       context: ./Frontend/angular
#       dockerfile: Dockerfile
#     ports:
#       - "4200:4200"
#     depends_on:
#       - backend
#     networks:
#       - front-network

#   mysql:
#     image: mysql:8.0
#     container_name: mysql
#     restart: always
#     environment:

#       MYSQL_DATABASE: colection_management
#       MYSQL_ROOT_PASSWORD: root
#       MYSQL_PASSWORD: root
#     volumes:
#       - mysql_data:/var/lib/mysql
#     ports:
#       - "3306:3306"
#     networks:
#       - back-network

# networks:
#   front-network:
#   back-network:
#     driver: bridge

# volumes:
#   mysql_data:

version: '3.8'

services:
  backend:
    container_name: backend
    image: backendcolocation:latest
    build:
      context: ./Backend/Project_Colocation_Management
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    environment:
      spring.datasource.url: jdbc:mysql://mysql:3306/colection_management?useUnicode=true&useJDBCCompliantTimezoneShift=true&createDatabaseIfNotExist=true&useLegacyDatetimeCode=false&serverTimezone=UTC
      spring.datasource.username: root
      spring.datasource.password: root
    depends_on:
      - mysql
    networks:
      - back-network

  frontend:
    container_name: frontend
    image: angularcolocation:latest
    build:
      context: ./Frontend/angular
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    depends_on:
      - backend
    networks:
      - front-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_DATABASE: colection_management
      MYSQL_ROOT_PASSWORD: root
      MYSQL_PASSWORD: root
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - back-network

  # nginx:
  #   container_name: nginx
  #   image: nginx-reverse-proxy:latest
  #   build:
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - front-network
  #     - back-network

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    depends_on:
      - frontend
      - backend
    networks:
      - front-network
      - back-network
networks:
  front-network:
  back-network:
    driver: bridge

volumes:
  mysql_data:
