{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport Swal from 'sweetalert2';\nexport let TenantListComponent = class TenantListComponent {\n  constructor(adminService, dialog, router) {\n    this.adminService = adminService;\n    this.dialog = dialog;\n    this.router = router;\n    this.displayedColumns = [\"name\", \"email\", \"phoneNumber\", \"Actions\"];\n  }\n  ngOnInit() {\n    this.getAllCompany();\n  }\n  getAllCompany() {\n    this.adminService.getAllTenant().subscribe(data => {\n      console.log(data);\n      this.dataSource = new MatTableDataSource(data);\n      this.dataSource.paginator = this.paginator;\n    }, err => {\n      console.log(err);\n    });\n  }\n  handleDeleteAction(values) {\n    console.log(values.id);\n    Swal.fire({\n      title: 'Are you sure?',\n      text: 'Are you sure you want to delete this tenant?',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(result => {\n      if (result.isConfirmed) {\n        // User clicked \"Yes\", implement tenant deletion here\n        console.log('Deleting tenant...');\n        this.deleteCompany(values.id);\n      } else {\n        // User clicked \"Cancel\" or closed the dialog\n        console.log('Deletion canceled.');\n      }\n    });\n  }\n  deleteCompany(id) {\n    this.adminService.deleteUser(id).subscribe(reponse => {\n      Swal.fire(\"Company deleted successfully\");\n      this.getAllCompany();\n    }, error => {\n      Swal.fire(\"Error deleting Please try again\");\n      console.log(error);\n      console.log(error);\n    });\n  }\n  handleUpdateCompany(id) {\n    console.log(id);\n    this.router.navigate(['/dashboard/updateStudent/', id]);\n  }\n};\n__decorate([ViewChild(MatPaginator, {\n  static: true\n})], TenantListComponent.prototype, \"paginator\", void 0);\nTenantListComponent = __decorate([Component({\n  selector: 'app-tenant-list',\n  templateUrl: './tenant-list.component.html',\n  styleUrls: ['./tenant-list.component.scss']\n})], TenantListComponent);","map":{"version":3,"names":["Component","ViewChild","MatPaginator","MatTableDataSource","Swal","TenantListComponent","constructor","adminService","dialog","router","displayedColumns","ngOnInit","getAllCompany","getAllTenant","subscribe","data","console","log","dataSource","paginator","err","handleDeleteAction","values","id","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","deleteCompany","deleteUser","reponse","error","handleUpdateCompany","navigate","__decorate","static","selector","templateUrl","styleUrls"],"sources":["G:\\Bureau\\Bureau\\Projet Web\\Frontend\\angular\\src\\app\\tenant-list\\tenant-list.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { AdminService } from '../ervices/admin.service';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { ConfirmationComponent } from '../dialog/confirmation/confirmation.component';\r\nimport Swal from 'sweetalert2';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-tenant-list',\r\n  templateUrl: './tenant-list.component.html',\r\n  styleUrls: ['./tenant-list.component.scss']\r\n})\r\nexport class TenantListComponent implements OnInit {\r\n\r\n  dataSource:any;\r\n  displayedColumns: string[] = [\"name\",\"email\", \"phoneNumber\",\"Actions\"];\r\n\r\nconstructor(private adminService:AdminService,\r\n  private dialog: MatDialog,\r\n  private router:Router\r\n  ){\r\n\r\n}\r\n\r\n@ViewChild(MatPaginator, { static: true }) paginator: MatPaginator | undefined;\r\n  ngOnInit(): void {\r\nthis.getAllCompany()\r\n  }\r\n  getAllCompany() {\r\nthis.adminService.getAllTenant().subscribe(\r\n  (data:any) => {\r\n    console.log(data);\r\n    \r\n    this.dataSource = new MatTableDataSource(data);\r\n    this.dataSource.paginator = this.paginator;\r\n  },\r\n  (err:any) => {\r\n\r\n   \r\nconsole.log(err);\r\n\r\n  });\r\n\r\n  }\r\n  handleDeleteAction(values: any){\r\n    console.log(values.id);\r\n    \r\n    Swal.fire({\r\n      title: 'Are you sure?',\r\n      text: 'Are you sure you want to delete this tenant?',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Yes, delete it!'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        // User clicked \"Yes\", implement tenant deletion here\r\n        console.log('Deleting tenant...');\r\n        this.deleteCompany(values.id);\r\n      } else {\r\n        // User clicked \"Cancel\" or closed the dialog\r\n        console.log('Deletion canceled.');\r\n      }\r\n    });\r\n  }\r\n        \r\n      \r\n      \r\n        deleteCompany(id: any) {\r\n          this.adminService.deleteUser(id).subscribe(\r\n      (reponse:any)=>{\r\n        \r\n    Swal.fire(\"Company deleted successfully\")\r\n      this.getAllCompany();\r\n     \r\n      \r\n\r\n        \r\n      },\r\n      (error:any)=>{\r\n        Swal.fire(\"Error deleting Please try again\")\r\n        console.log(error);\r\n        \r\n\r\n        \r\n      console.log(error);\r\n    \r\n      \r\n      }\r\n      \r\n          );\r\n        }\r\n\r\n\r\n        \r\n        handleUpdateCompany(id:number){\r\n          console.log(id);\r\n          \r\n          this.router.navigate(['/dashboard/updateStudent/',id])\r\n        }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAUC,SAAS,QAAQ,eAAe;AAC5D,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,kBAAkB,QAAQ,yBAAyB;AAI5D,OAAOC,IAAI,MAAM,aAAa;AAQvB,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAKhCC,YAAoBC,YAAyB,EACnCC,MAAiB,EACjBC,MAAa;IAFH,KAAAF,YAAY,GAAZA,YAAY;IACtB,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,MAAM,GAANA,MAAM;IAJd,KAAAC,gBAAgB,GAAa,CAAC,MAAM,EAAC,OAAO,EAAE,aAAa,EAAC,SAAS,CAAC;EAOxE;EAGEC,QAAQA,CAAA;IACV,IAAI,CAACC,aAAa,EAAE;EAClB;EACAA,aAAaA,CAAA;IACf,IAAI,CAACL,YAAY,CAACM,YAAY,EAAE,CAACC,SAAS,CACvCC,IAAQ,IAAI;MACXC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MAEjB,IAAI,CAACG,UAAU,GAAG,IAAIf,kBAAkB,CAACY,IAAI,CAAC;MAC9C,IAAI,CAACG,UAAU,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS;IAC5C,CAAC,EACAC,GAAO,IAAI;MAGdJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;IAEd,CAAC,CAAC;EAEF;EACAC,kBAAkBA,CAACC,MAAW;IAC5BN,OAAO,CAACC,GAAG,CAACK,MAAM,CAACC,EAAE,CAAC;IAEtBnB,IAAI,CAACoB,IAAI,CAAC;MACRC,KAAK,EAAE,eAAe;MACtBC,IAAI,EAAE,8CAA8C;MACpDC,IAAI,EAAE,SAAS;MACfC,gBAAgB,EAAE,IAAI;MACtBC,kBAAkB,EAAE,SAAS;MAC7BC,iBAAiB,EAAE,MAAM;MACzBC,iBAAiB,EAAE;KACpB,CAAC,CAACC,IAAI,CAAEC,MAAM,IAAI;MACjB,IAAIA,MAAM,CAACC,WAAW,EAAE;QACtB;QACAlB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;QACjC,IAAI,CAACkB,aAAa,CAACb,MAAM,CAACC,EAAE,CAAC;OAC9B,MAAM;QACL;QACAP,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;;IAErC,CAAC,CAAC;EACJ;EAIMkB,aAAaA,CAACZ,EAAO;IACnB,IAAI,CAAChB,YAAY,CAAC6B,UAAU,CAACb,EAAE,CAAC,CAACT,SAAS,CAC7CuB,OAAW,IAAG;MAEjBjC,IAAI,CAACoB,IAAI,CAAC,8BAA8B,CAAC;MACvC,IAAI,CAACZ,aAAa,EAAE;IAKpB,CAAC,EACA0B,KAAS,IAAG;MACXlC,IAAI,CAACoB,IAAI,CAAC,iCAAiC,CAAC;MAC5CR,OAAO,CAACC,GAAG,CAACqB,KAAK,CAAC;MAIpBtB,OAAO,CAACC,GAAG,CAACqB,KAAK,CAAC;IAGlB,CAAC,CAEI;EACH;EAIAC,mBAAmBA,CAAChB,EAAS;IAC3BP,OAAO,CAACC,GAAG,CAACM,EAAE,CAAC;IAEf,IAAI,CAACd,MAAM,CAAC+B,QAAQ,CAAC,CAAC,2BAA2B,EAACjB,EAAE,CAAC,CAAC;EACxD;CACP;AA7E0CkB,UAAA,EAA1CxC,SAAS,CAACC,YAAY,EAAE;EAAEwC,MAAM,EAAE;AAAI,CAAE,CAAC,C,qDAAqC;AAZlErC,mBAAmB,GAAAoC,UAAA,EAL/BzC,SAAS,CAAC;EACT2C,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWxC,mBAAmB,CAyF/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}