{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MessagingService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:9090/api/messages';\n  }\n  sendMessage(senderId, receiverId, content) {\n    return this.http.post(`${this.baseUrl}/send`, {\n      senderId,\n      receiverId,\n      content\n    });\n  }\n  getMessages(userId) {\n    return this.http.get(`${this.baseUrl}/user/${userId}`);\n  }\n  markAsRead(messageId) {\n    return this.http.patch(`${this.baseUrl}/read/${messageId}`, {});\n  }\n  static #_ = this.ɵfac = function MessagingService_Factory(t) {\n    return new (t || MessagingService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessagingService,\n    factory: MessagingService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["MessagingService","constructor","http","baseUrl","sendMessage","senderId","receiverId","content","post","getMessages","userId","get","markAsRead","messageId","patch","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\Bureau\\Bureau\\Projet Web\\Frontend\\angular\\src\\app\\services\\messaging.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Message } from '../components/messages/message';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessagingService {\n  private baseUrl = 'http://localhost:9090/api/messages';\n\n  constructor(private http: HttpClient) {}\n\n  sendMessage(senderId: number, receiverId: number, content: string): Observable<Message> {\n    return this.http.post<Message>(`${this.baseUrl}/send`, { senderId, receiverId, content });\n  }\n\n  getMessages(userId: number): Observable<Message[]> {\n    return this.http.get<Message[]>(`${this.baseUrl}/user/${userId}`);\n  }\n\n  markAsRead(messageId: number): Observable<void> {\n    return this.http.patch<void>(`${this.baseUrl}/read/${messageId}`, {});\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,gBAAgB;EAG3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,oCAAoC;EAEf;EAEvCC,WAAWA,CAACC,QAAgB,EAAEC,UAAkB,EAAEC,OAAe;IAC/D,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAU,GAAG,IAAI,CAACL,OAAO,OAAO,EAAE;MAAEE,QAAQ;MAAEC,UAAU;MAAEC;IAAO,CAAE,CAAC;EAC3F;EAEAE,WAAWA,CAACC,MAAc;IACxB,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAY,GAAG,IAAI,CAACR,OAAO,SAASO,MAAM,EAAE,CAAC;EACnE;EAEAE,UAAUA,CAACC,SAAiB;IAC1B,OAAO,IAAI,CAACX,IAAI,CAACY,KAAK,CAAO,GAAG,IAAI,CAACX,OAAO,SAASU,SAAS,EAAE,EAAE,EAAE,CAAC;EACvE;EAAC,QAAAE,CAAA,G;qBAfUf,gBAAgB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBpB,gBAAgB;IAAAqB,OAAA,EAAhBrB,gBAAgB,CAAAsB,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}