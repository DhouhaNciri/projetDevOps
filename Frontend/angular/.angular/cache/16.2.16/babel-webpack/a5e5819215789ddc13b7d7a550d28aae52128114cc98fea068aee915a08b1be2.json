{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatService {\n  constructor(http) {\n    this.http = http;\n    this.url = `${environment.apiURL}/chats`;\n  }\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: token ? `Bearer ${token}` : ''\n    });\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      errorMessage = `Server returned code: ${error.status}, error message is: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n  // Fetch messages for the current user\n  getMessages() {\n    return this.http.get(`${this.url}/user/my`, {\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  // Send a message to another user\n  sendMessage(chatMessage, userId) {\n    const params = {\n      chatMessage\n    }; // Add chatMessage as query parameter\n    return this.http.post(`${this.url}/user/${userId}`, {}, {\n      params,\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","throwError","catchError","environment","ChatService","constructor","http","url","apiURL","getAuthHeaders","token","localStorage","getItem","Authorization","handleError","error","errorMessage","ErrorEvent","message","status","getMessages","get","headers","pipe","sendMessage","chatMessage","userId","params","post","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\Bureau\\Bureau\\Projet Web\\Frontend\\angular\\src\\app\\services\\chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChatService {\n  private url = `${environment.apiURL}/chats`;\n\n  constructor(private http: HttpClient) {}\n\n  private getAuthHeaders(): HttpHeaders {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: token ? `Bearer ${token}` : '',\n    });\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      errorMessage = `Server returned code: ${error.status}, error message is: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n\n  // Fetch messages for the current user\n  getMessages(): Observable<any[]> {\n    return this.http\n      .get<any[]>(`${this.url}/user/my`, { headers: this.getAuthHeaders() })\n      .pipe(catchError(this.handleError));\n  }\n\n  // Send a message to another user\n  sendMessage(chatMessage: string, userId: number): Observable<any> {\n\n\n    const params = { chatMessage }; // Add chatMessage as query parameter\n    return this.http\n      .post<any>(`${this.url}/user/${userId}`, {}, { params, headers: this.getAuthHeaders() })\n      .pipe(catchError(this.handleError));\n\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAA2B,sBAAsB;AACjF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,GAAG,GAAG,GAAGJ,WAAW,CAACK,MAAM,QAAQ;EAEJ;EAE/BC,cAAcA,CAAA;IACpB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAIZ,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClCa,aAAa,EAAEH,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG;KAC5C,CAAC;EACJ;EAEQI,WAAWA,CAACC,KAAwB;IAC1C,IAAIC,YAAY,GAAG,4BAA4B;IAC/C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrCD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MACLF,YAAY,GAAG,yBAAyBD,KAAK,CAACI,MAAM,uBAAuBJ,KAAK,CAACG,OAAO,EAAE;;IAE5F,OAAOjB,UAAU,CAACe,YAAY,CAAC;EACjC;EAEA;EACAI,WAAWA,CAAA;IACT,OAAO,IAAI,CAACd,IAAI,CACbe,GAAG,CAAQ,GAAG,IAAI,CAACd,GAAG,UAAU,EAAE;MAAEe,OAAO,EAAE,IAAI,CAACb,cAAc;IAAE,CAAE,CAAC,CACrEc,IAAI,CAACrB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvC;EAEA;EACAU,WAAWA,CAACC,WAAmB,EAAEC,MAAc;IAG7C,MAAMC,MAAM,GAAG;MAAEF;IAAW,CAAE,CAAC,CAAC;IAChC,OAAO,IAAI,CAACnB,IAAI,CACbsB,IAAI,CAAM,GAAG,IAAI,CAACrB,GAAG,SAASmB,MAAM,EAAE,EAAE,EAAE,EAAE;MAAEC,MAAM;MAAEL,OAAO,EAAE,IAAI,CAACb,cAAc;IAAE,CAAE,CAAC,CACvFc,IAAI,CAACrB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EAEvC;EAAC,QAAAe,CAAA,G;qBAvCUzB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX9B,WAAW;IAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}