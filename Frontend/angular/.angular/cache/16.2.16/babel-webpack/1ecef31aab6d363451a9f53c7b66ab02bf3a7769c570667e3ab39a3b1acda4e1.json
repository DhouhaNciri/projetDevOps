{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HousingService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiURL;\n  }\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    });\n  }\n  createHousing(housing) {\n    return this.http.post(this.apiUrl + \"/housing\", housing, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  countHousing() {\n    return this.http.get(this.apiUrl + \"/count\", {\n      headers: this.getAuthHeaders()\n    });\n  }\n  // Update an existing housing entry\n  updateHousing(id, housing) {\n    return this.http.put(`${this.apiUrl + /housing/}${id}`, housing, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  static #_ = this.ɵfac = function HousingService_Factory(t) {\n    return new (t || HousingService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HousingService,\n    factory: HousingService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","HousingService","constructor","http","apiUrl","apiURL","getAuthHeaders","token","localStorage","getItem","createHousing","housing","post","headers","countHousing","get","updateHousing","id","put","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\Bureau\\Bureau\\Projet Web\\Frontend\\angular\\src\\app\\add-housing\\housing.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Housing } from './housing.model';\nimport { environment } from 'src/environments/environment';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HousingService {\n  private apiUrl =  environment.apiURL;\n\n  constructor(private http: HttpClient) {}\nprivate getAuthHeaders(): HttpHeaders {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    });\n  }\n  createHousing(housing: Housing): Observable<Housing> {\n    return this.http.post<Housing>(this.apiUrl+\"/housing\", housing,{\n      headers: this.getAuthHeaders()\n    });\n  }\n\n  countHousing(): Observable<String> {\n    return this.http.get<S>(this.apiUrl+\"/count\", {\n      headers: this.getAuthHeaders()\n    });\n  }\n\n    // Update an existing housing entry\n    updateHousing(id: number, housing: Housing): Observable<Housing> {\n      return this.http.put<Housing>(`${this.apiUrl+/housing/}${id}`, housing,{\n        headers: this.getAuthHeaders()\n      });\n    }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,WAAW,QAAQ,8BAA8B;;;AAM1D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAIJ,WAAW,CAACK,MAAM;EAEG;EACjCC,cAAcA,CAAA;IAClB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAIV,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEQ,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG;KAC9C,CAAC;EACJ;EACAG,aAAaA,CAACC,OAAgB;IAC5B,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAU,IAAI,CAACR,MAAM,GAAC,UAAU,EAAEO,OAAO,EAAC;MAC7DE,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEAQ,YAAYA,CAAA;IACV,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAI,IAAI,CAACX,MAAM,GAAC,QAAQ,EAAE;MAC5CS,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEE;EACAU,aAAaA,CAACC,EAAU,EAAEN,OAAgB;IACxC,OAAO,IAAI,CAACR,IAAI,CAACe,GAAG,CAAU,GAAG,IAAI,CAACd,MAAM,GAAC,SAAS,GAAGa,EAAE,EAAE,EAAEN,OAAO,EAAC;MACrEE,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAAC,QAAAa,CAAA,G;qBA5BQlB,cAAc,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdvB,cAAc;IAAAwB,OAAA,EAAdxB,cAAc,CAAAyB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}