{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.url = environment.apiURL + '/tasks/owner';\n  }\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    });\n  }\n  // Fetch tasks for the logged-in user\n  getMyTasks() {\n    return this.http.get(`${this.url}/user`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  // Create a new task\n  createTask(description, emailto) {\n    return this.http.post(this.url, {\n      description,\n      emailto\n    }, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  finishTask(taskId) {\n    return this.http.put(`${this.url}/finish/${taskId}`, null, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getAllTasks() {\n    return this.http.get(`${this.url}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  static #_ = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","TaskService","constructor","http","url","apiURL","getAuthHeaders","token","localStorage","getItem","getMyTasks","get","headers","createTask","description","emailto","post","finishTask","taskId","put","getAllTasks","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\Bureau\\Bureau\\Projet Web\\Frontend\\angular\\src\\app\\services\\task.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  \n  url = environment.apiURL+'/tasks/owner';\n  constructor(private http: HttpClient) {}\nprivate getAuthHeaders(): HttpHeaders {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    });\n  }\n  // Fetch tasks for the logged-in user\n  getMyTasks(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.url}/user`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n\n\n\n\n  \n  // Create a new task\n  createTask(description: string, emailto: string): Observable<any> {\n    return this.http.post<any>(this.url, { description, emailto }, {\n      headers: this.getAuthHeaders()\n    });\n  }\n\n  \n  finishTask(taskId: number): Observable<any> {\n    return this.http.put<any>(`${this.url}/finish/${taskId}`, null, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getAllTasks(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.url}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  \n\n\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,8BAA8B;;;AAI1D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADxB,KAAAC,GAAG,GAAGJ,WAAW,CAACK,MAAM,GAAC,cAAc;EACA;EACjCC,cAAcA,CAAA;IAClB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAIV,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEQ,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG;KAC9C,CAAC;EACJ;EACA;EACAG,UAAUA,CAAA;IACR,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAQ,GAAG,IAAI,CAACP,GAAG,OAAO,EAAE;MAC9CQ,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EAMA;EACAO,UAAUA,CAACC,WAAmB,EAAEC,OAAe;IAC7C,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAM,IAAI,CAACZ,GAAG,EAAE;MAAEU,WAAW;MAAEC;IAAO,CAAE,EAAE;MAC7DH,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EAGAW,UAAUA,CAACC,MAAc;IACvB,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAM,GAAG,IAAI,CAACf,GAAG,WAAWc,MAAM,EAAE,EAAE,IAAI,EAAE;MAC9DN,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EACAc,WAAWA,CAAA;IACT,OAAO,IAAI,CAACjB,IAAI,CAACQ,GAAG,CAAQ,GAAG,IAAI,CAACP,GAAG,EAAE,EAAE;MACzCQ,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EAAC,QAAAe,CAAA,G;qBAxCUpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzB,WAAW;IAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}