{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LogementService {\n  constructor(http) {\n    this.http = http;\n    this.url = `${environment.apiURL}`;\n  }\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: token ? `Bearer ${token}` : ''\n    });\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Backend error\n      errorMessage = `Server returned code: ${error.status}, error message is: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n  createLogement(name, address) {\n    return this.http.post(`${this.url}/logements?name=${name}&address=${address}`, {}, {\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  addUserToLogement(userEmail) {\n    return this.http.post(`${this.url}/logements/users?email=${userEmail}`, {}, {\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  deleteUserFromLogement(userId) {\n    return this.http.delete(`${this.url}/logements/users/${userId}`, {\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  getAllLogements() {\n    return this.http.get(this.url + '/logements', {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getLogementPersonnel() {\n    return this.http.get(`${this.url}/logements/me/logement-personnel`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getLogementPersonnelForCurrentUser() {\n    return this.http.get(`${this.url}/logements/me/logement-personnel`, {\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  deleteLogement(logementId) {\n    return this.http.delete(`${this.url}/logements/${logementId}`, {\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  getLogementMessages() {\n    return this.http.get(`${this.url}/chats/mylogement/messages`, {\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  // Send a message to the current user's logement\n  sendMessageToLogement(chatMessage) {\n    const params = {\n      chatMessage\n    }; // Add chatMessage as query parameter\n    return this.http.post(`${this.url}/chats`, {}, {\n      params,\n      headers: this.getAuthHeaders()\n    }).pipe(catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function LogementService_Factory(t) {\n    return new (t || LogementService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LogementService,\n    factory: LogementService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","throwError","catchError","environment","LogementService","constructor","http","url","apiURL","getAuthHeaders","token","localStorage","getItem","Authorization","handleError","error","errorMessage","ErrorEvent","message","status","createLogement","name","address","post","headers","pipe","addUserToLogement","userEmail","deleteUserFromLogement","userId","delete","getAllLogements","get","getLogementPersonnel","getLogementPersonnelForCurrentUser","deleteLogement","logementId","getLogementMessages","sendMessageToLogement","chatMessage","params","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\Bureau\\Bureau\\Projet Web\\Frontend\\angular\\src\\app\\services\\logement.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogementService {\n  private url = `${environment.apiURL}`;\n\n  constructor(private http: HttpClient) {}\n\n  private getAuthHeaders(): HttpHeaders {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: token ? `Bearer ${token}` : '',\n    });\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Backend error\n      errorMessage = `Server returned code: ${error.status}, error message is: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n\n \n\n\n  createLogement(name: string, address: string): Observable<any> {\n    return this.http\n      .post<any>(`${this.url}/logements?name=${name}&address=${address}`, {}, { headers: this.getAuthHeaders() })\n      .pipe(catchError(this.handleError));\n  }\n\n  addUserToLogement(userEmail: string): Observable<any> {\n    return this.http\n      .post<any>(`${this.url}/logements/users?email=${userEmail}`, {}, { headers: this.getAuthHeaders() })\n      .pipe(catchError(this.handleError));\n  }\n  \n  \n  deleteUserFromLogement( userId: number): Observable<void> {\n    return this.http\n      .delete<void>(`${this.url}/logements/users/${userId}`, { headers: this.getAuthHeaders() })\n      .pipe(catchError(this.handleError));\n  }\n\n  getAllLogements(): Observable<any[]> {\n    return this.http.get<any[]>(this.url+'/logements', { headers: this.getAuthHeaders() });\n  }\n\n  getLogementPersonnel(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.url}/logements/me/logement-personnel`, {\n      headers: this.getAuthHeaders(),\n    });\n  }\n\n  getLogementPersonnelForCurrentUser(): Observable<any> {\n    return this.http\n      .get<any>(`${this.url}/logements/me/logement-personnel`, { headers: this.getAuthHeaders() })\n      .pipe(catchError(this.handleError));\n  }\n  \n\n\n \n\n  deleteLogement(logementId: number): Observable<void> {\n    return this.http\n      .delete<void>(`${this.url}/logements/${logementId}`, { headers: this.getAuthHeaders() })\n      .pipe(catchError(this.handleError));\n  }\n\n\n\n\n  getLogementMessages(): Observable<any[]> {\n    return this.http\n      .get<any[]>(`${this.url}/chats/mylogement/messages`, { headers: this.getAuthHeaders() })\n      .pipe(catchError(this.handleError));\n  }\n\n  // Send a message to the current user's logement\n  sendMessageToLogement(chatMessage: string): Observable<any> {\n    const params = { chatMessage }; // Add chatMessage as query parameter\n    return this.http\n      .post<any>(`${this.url}/chats`, {}, { params, headers: this.getAuthHeaders() })\n      .pipe(catchError(this.handleError));\n  }\n  \n\n\n\n\n\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAA2B,sBAAsB;AACjF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,GAAG,GAAG,GAAGJ,WAAW,CAACK,MAAM,EAAE;EAEE;EAE/BC,cAAcA,CAAA;IACpB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAIZ,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClCa,aAAa,EAAEH,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG;KAC5C,CAAC;EACJ;EAEQI,WAAWA,CAACC,KAAwB;IAC1C,IAAIC,YAAY,GAAG,4BAA4B;IAC/C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MACL;MACAF,YAAY,GAAG,yBAAyBD,KAAK,CAACI,MAAM,uBAAuBJ,KAAK,CAACG,OAAO,EAAE;;IAE5F,OAAOjB,UAAU,CAACe,YAAY,CAAC;EACjC;EAKAI,cAAcA,CAACC,IAAY,EAAEC,OAAe;IAC1C,OAAO,IAAI,CAAChB,IAAI,CACbiB,IAAI,CAAM,GAAG,IAAI,CAAChB,GAAG,mBAAmBc,IAAI,YAAYC,OAAO,EAAE,EAAE,EAAE,EAAE;MAAEE,OAAO,EAAE,IAAI,CAACf,cAAc;IAAE,CAAE,CAAC,CAC1GgB,IAAI,CAACvB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvC;EAEAY,iBAAiBA,CAACC,SAAiB;IACjC,OAAO,IAAI,CAACrB,IAAI,CACbiB,IAAI,CAAM,GAAG,IAAI,CAAChB,GAAG,0BAA0BoB,SAAS,EAAE,EAAE,EAAE,EAAE;MAAEH,OAAO,EAAE,IAAI,CAACf,cAAc;IAAE,CAAE,CAAC,CACnGgB,IAAI,CAACvB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvC;EAGAc,sBAAsBA,CAAEC,MAAc;IACpC,OAAO,IAAI,CAACvB,IAAI,CACbwB,MAAM,CAAO,GAAG,IAAI,CAACvB,GAAG,oBAAoBsB,MAAM,EAAE,EAAE;MAAEL,OAAO,EAAE,IAAI,CAACf,cAAc;IAAE,CAAE,CAAC,CACzFgB,IAAI,CAACvB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvC;EAEAiB,eAAeA,CAAA;IACb,OAAO,IAAI,CAACzB,IAAI,CAAC0B,GAAG,CAAQ,IAAI,CAACzB,GAAG,GAAC,YAAY,EAAE;MAAEiB,OAAO,EAAE,IAAI,CAACf,cAAc;IAAE,CAAE,CAAC;EACxF;EAEAwB,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAAC3B,IAAI,CAAC0B,GAAG,CAAQ,GAAG,IAAI,CAACzB,GAAG,kCAAkC,EAAE;MACzEiB,OAAO,EAAE,IAAI,CAACf,cAAc;KAC7B,CAAC;EACJ;EAEAyB,kCAAkCA,CAAA;IAChC,OAAO,IAAI,CAAC5B,IAAI,CACb0B,GAAG,CAAM,GAAG,IAAI,CAACzB,GAAG,kCAAkC,EAAE;MAAEiB,OAAO,EAAE,IAAI,CAACf,cAAc;IAAE,CAAE,CAAC,CAC3FgB,IAAI,CAACvB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvC;EAMAqB,cAAcA,CAACC,UAAkB;IAC/B,OAAO,IAAI,CAAC9B,IAAI,CACbwB,MAAM,CAAO,GAAG,IAAI,CAACvB,GAAG,cAAc6B,UAAU,EAAE,EAAE;MAAEZ,OAAO,EAAE,IAAI,CAACf,cAAc;IAAE,CAAE,CAAC,CACvFgB,IAAI,CAACvB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvC;EAKAuB,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAAC/B,IAAI,CACb0B,GAAG,CAAQ,GAAG,IAAI,CAACzB,GAAG,4BAA4B,EAAE;MAAEiB,OAAO,EAAE,IAAI,CAACf,cAAc;IAAE,CAAE,CAAC,CACvFgB,IAAI,CAACvB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvC;EAEA;EACAwB,qBAAqBA,CAACC,WAAmB;IACvC,MAAMC,MAAM,GAAG;MAAED;IAAW,CAAE,CAAC,CAAC;IAChC,OAAO,IAAI,CAACjC,IAAI,CACbiB,IAAI,CAAM,GAAG,IAAI,CAAChB,GAAG,QAAQ,EAAE,EAAE,EAAE;MAAEiC,MAAM;MAAEhB,OAAO,EAAE,IAAI,CAACf,cAAc;IAAE,CAAE,CAAC,CAC9EgB,IAAI,CAACvB,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACvC;EAAC,QAAA2B,CAAA,G;qBAxFUrC,eAAe,EAAAsC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf1C,eAAe;IAAA2C,OAAA,EAAf3C,eAAe,CAAA4C,IAAA;IAAAC,UAAA,EAFd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}