{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/task.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/tabs\";\nfunction TaskComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Description is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Valid email is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskComponent_div_20_mat_icon_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"check_circle\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskComponent_div_20_mat_icon_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"radio_button_unchecked\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskComponent_div_20_button_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function TaskComponent_div_20_button_17_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const task_r4 = i0.ɵɵnextContext().$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onFinishTask(task_r4.id));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"check_circle\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" Complete Task \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"completed\": a0,\n    \"pending\": a1\n  };\n};\nfunction TaskComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"div\", 16)(2, \"p\")(3, \"strong\");\n    i0.ɵɵtext(4, \"Description:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\")(7, \"strong\");\n    i0.ɵɵtext(8, \"Assigned To:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\")(11, \"strong\");\n    i0.ɵɵtext(12, \"Status:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"span\", 17);\n    i0.ɵɵtemplate(14, TaskComponent_div_20_mat_icon_14_Template, 2, 0, \"mat-icon\", 8);\n    i0.ɵɵtemplate(15, TaskComponent_div_20_mat_icon_15_Template, 2, 0, \"mat-icon\", 8);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(17, TaskComponent_div_20_button_17_Template, 4, 0, \"button\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r4 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", task_r4.description, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", task_r4.assignedTo.email, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(7, _c0, task_r4.completed, !task_r4.completed));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r4.completed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r4.completed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r4.completed ? \"Completed\" : \"Pending\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r4.completed);\n  }\n}\nfunction TaskComponent_div_23_mat_icon_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"check_circle\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskComponent_div_23_mat_icon_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"radio_button_unchecked\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskComponent_div_23_button_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function TaskComponent_div_23_button_17_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const task_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.onFinishTask(task_r11.id));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"check_circle\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" Complete Task \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"div\", 16)(2, \"p\")(3, \"strong\");\n    i0.ɵɵtext(4, \"Description:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\")(7, \"strong\");\n    i0.ɵɵtext(8, \"Assigned To:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\")(11, \"strong\");\n    i0.ɵɵtext(12, \"Status:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"span\", 17);\n    i0.ɵɵtemplate(14, TaskComponent_div_23_mat_icon_14_Template, 2, 0, \"mat-icon\", 8);\n    i0.ɵɵtemplate(15, TaskComponent_div_23_mat_icon_15_Template, 2, 0, \"mat-icon\", 8);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(17, TaskComponent_div_23_button_17_Template, 4, 0, \"button\", 18);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const task_r11 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", task_r11.description, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", task_r11.assignedTo.email, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(7, _c0, task_r11.completed, !task_r11.completed));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r11.completed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r11.completed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r11.completed ? \"Completed\" : \"Pending\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !task_r11.completed);\n  }\n}\nexport let TaskComponent = /*#__PURE__*/(() => {\n  class TaskComponent {\n    constructor(taskService, fb) {\n      this.taskService = taskService;\n      this.fb = fb;\n      this.tasks = []; // Tasks for the logged-in user (My Tasks)\n      this.allTasks = []; // All tasks\n      this.taskForm = this.fb.group({\n        description: ['', [Validators.required]],\n        emailto: ['', [Validators.required, Validators.email]]\n      });\n    }\n    ngOnInit() {\n      this.getAllTasks();\n      this.getMyTasks();\n    }\n    // Fetch tasks assigned to the logged-in user (My Tasks)\n    getMyTasks() {\n      this.taskService.getMyTasks().subscribe(res => {\n        this.tasks = res;\n      }, error => {\n        console.error('Error fetching tasks:', error);\n      });\n    }\n    // Fetch all tasks (All Tasks)\n    getAllTasks() {\n      this.taskService.getAllTasks().subscribe(res => {\n        this.allTasks = res;\n      }, error => {\n        console.error('Error fetching all tasks:', error);\n      });\n    }\n    // Create a new task\n    createTask() {\n      if (this.taskForm.invalid) {\n        Swal.fire('Validation Error', 'Please fill in all required fields.', 'error');\n        return;\n      }\n      const {\n        description,\n        emailto\n      } = this.taskForm.value;\n      this.taskService.createTask(description, emailto).subscribe(res => {\n        Swal.fire('Success', 'Task created successfully!', 'success');\n        this.getMyTasks(); // Refresh tasks after task is created\n        this.taskForm.reset(); // Reset the form after task creation\n      }, error => {\n        Swal.fire('Error', 'Failed to create task. Please try again.', 'error');\n        console.error('Error creating task:', error);\n      });\n    }\n    // Finish the task and update the UI\n    onFinishTask(taskId) {\n      this.taskService.finishTask(taskId).subscribe(response => {\n        console.log('Task finished:', response);\n        // Update the task status locally to reflect the change in the UI\n        const updatedTask = this.tasks.find(task => task.id === taskId);\n        if (updatedTask) {\n          updatedTask.completed = true;\n        }\n      }, error => {\n        console.error('Error finishing task:', error);\n      });\n    }\n    // Handle tab change\n    onTabChange(event) {\n      if (event.index === 0) {\n        this.getMyTasks();\n      } else if (event.index === 1) {\n        this.getAllTasks();\n      }\n    }\n    static #_ = this.ɵfac = function TaskComponent_Factory(t) {\n      return new (t || TaskComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskComponent,\n      selectors: [[\"app-task\"]],\n      decls: 24,\n      vars: 5,\n      consts: [[\"id\", \"tasks\", 1, \"tasks-section\", 2, \"margin-top\", \"100px\"], [1, \"task-container\"], [3, \"selectedIndexChange\"], [\"label\", \"Create Task\"], [1, \"task-form-container\"], [1, \"task-form\", 3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"fill\", 1, \"form-field\"], [\"matInput\", \"\", \"formControlName\", \"description\", \"placeholder\", \"Enter task description\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"emailto\", \"placeholder\", \"Enter email\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"submit-button\"], [\"label\", \"My Tasks\"], [1, \"task-list\"], [\"class\", \"task-item\", 4, \"ngFor\", \"ngForOf\"], [\"label\", \"All Tasks\"], [1, \"task-item\"], [1, \"task-details\"], [3, \"ngClass\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", \"class\", \"finish-button\", 3, \"click\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", 1, \"finish-button\", 3, \"click\"]],\n      template: function TaskComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"mat-tab-group\", 2);\n          i0.ɵɵlistener(\"selectedIndexChange\", function TaskComponent_Template_mat_tab_group_selectedIndexChange_2_listener($event) {\n            return ctx.onTabChange($event);\n          });\n          i0.ɵɵelementStart(3, \"mat-tab\", 3)(4, \"div\", 4)(5, \"form\", 5);\n          i0.ɵɵlistener(\"ngSubmit\", function TaskComponent_Template_form_ngSubmit_5_listener() {\n            return ctx.createTask();\n          });\n          i0.ɵɵelementStart(6, \"mat-form-field\", 6)(7, \"mat-label\");\n          i0.ɵɵtext(8, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 7);\n          i0.ɵɵtemplate(10, TaskComponent_mat_error_10_Template, 2, 0, \"mat-error\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"mat-form-field\", 6)(12, \"mat-label\");\n          i0.ɵɵtext(13, \"Assign To (Email)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 9);\n          i0.ɵɵtemplate(15, TaskComponent_mat_error_15_Template, 2, 0, \"mat-error\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"button\", 10);\n          i0.ɵɵtext(17, \"Create Task\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(18, \"mat-tab\", 11)(19, \"div\", 12);\n          i0.ɵɵtemplate(20, TaskComponent_div_20_Template, 18, 10, \"div\", 13);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(21, \"mat-tab\", 14)(22, \"div\", 12);\n          i0.ɵɵtemplate(23, TaskComponent_div_23_Template, 18, 10, \"div\", 13);\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          let tmp_2_0;\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"formGroup\", ctx.taskForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.taskForm.get(\"description\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.taskForm.get(\"description\")) == null ? null : tmp_1_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.taskForm.get(\"emailto\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.taskForm.get(\"emailto\")) == null ? null : tmp_2_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.tasks);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.allTasks);\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i4.MatButton, i5.MatInput, i6.MatFormField, i6.MatLabel, i6.MatError, i7.MatIcon, i8.MatTab, i8.MatTabGroup],\n      styles: [\".tasks-section[_ngcontent-%COMP%]{margin-top:50px;display:flex;justify-content:center}.task-container[_ngcontent-%COMP%]{width:80%;max-width:800px;margin-top:30px;padding:20px;background-color:#f9f9f9;border-radius:10px;box-shadow:0 2px 10px #0000001a}.section-title[_ngcontent-%COMP%]{font-size:1.8rem;font-weight:600;color:#333;text-align:center;margin-bottom:20px}.task-form-container[_ngcontent-%COMP%]{margin-bottom:30px}.task-form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:15px}.form-field[_ngcontent-%COMP%]{width:100%}.submit-button[_ngcontent-%COMP%]{margin-top:15px;padding:10px 20px;font-size:1rem}.task-list[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:20px}.task-item[_ngcontent-%COMP%]{padding:15px;background-color:#fff;border-radius:8px;box-shadow:0 2px 5px #0000001a;display:flex;justify-content:space-between;align-items:center}.task-details[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0;font-size:1rem}.task-details[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-weight:700}.completed[_ngcontent-%COMP%]{color:#4caf50}.pending[_ngcontent-%COMP%]{color:#f44336}.finish-button[_ngcontent-%COMP%]{background-color:#ff9800;color:#fff;font-weight:700;padding:8px 15px;text-transform:uppercase;transition:background-color .3s ease}.finish-button[_ngcontent-%COMP%]:hover{background-color:#e65100}.finish-button[_ngcontent-%COMP%]:disabled{background-color:#ccc}.task-buttons[_ngcontent-%COMP%]{display:flex;justify-content:space-between;margin-bottom:20px}.task-buttons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-right:10px}.task-navbar[_ngcontent-%COMP%]{display:flex;justify-content:center;gap:20px;margin-bottom:20px;background-color:#f5f5f5;padding:10px;border-radius:8px}.task-navbar[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:10px 20px}.task-form-container[_ngcontent-%COMP%], .task-list[_ngcontent-%COMP%]{margin-top:20px}.tasks-section[_ngcontent-%COMP%]{margin-top:20px}.mat-tab-group[_ngcontent-%COMP%]{margin-bottom:20px}.task-list[_ngcontent-%COMP%]{margin-top:20px}.task-item[_ngcontent-%COMP%]{padding:10px;border:1px solid #ddd;margin-bottom:10px;border-radius:8px}.task-details[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:5px 0}button.finish-button[_ngcontent-%COMP%]{margin-top:10px}\"]\n    });\n  }\n  return TaskComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}