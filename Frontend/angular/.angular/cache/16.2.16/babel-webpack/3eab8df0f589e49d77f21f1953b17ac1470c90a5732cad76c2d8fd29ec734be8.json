{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/chat.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction ChatComponent_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 7);\n    i0.ɵɵlistener(\"click\", function ChatComponent_li_7_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const message_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.setRecipientId(message_r1.sendFrom.id));\n    });\n    i0.ɵɵelementStart(1, \"div\", 8)(2, \"strong\");\n    i0.ɵɵtext(3, \"From:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementStart(5, \"small\", 9);\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 10)(9, \"strong\");\n    i0.ɵɵtext(10, \"Message:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const message_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate2(\" \", message_r1.sendFrom.firstName, \" \", message_r1.sendFrom.lastName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 4, message_r1.date, \"short\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", message_r1.message || \"No message content available\", \" \");\n  }\n}\nexport let ChatComponent = /*#__PURE__*/(() => {\n  class ChatComponent {\n    constructor(chatService, route) {\n      this.chatService = chatService;\n      this.route = route;\n      this.messages = []; // Holds the list of messages\n      this.messageContent = ''; // Holds the new message content\n      this.recipientId = 0; // Holds the recipient user ID\n      this.route.queryParams.subscribe(params => {\n        this.recipientId = params['userId']; // Now you can use the recipientId in your chat logic\n      });\n    }\n\n    ngOnInit() {\n      this.loadMessages(); // Load messages when the component initializes\n    }\n    // Load messages from the server\n    loadMessages() {\n      this.chatService.getMessages().subscribe({\n        next: data => this.messages = data,\n        error: error => console.error('Error loading messages:', error)\n      });\n    }\n    // Send a new message\n    sendMessage() {\n      if (this.messageContent && this.recipientId) {\n        this.chatService.sendMessage(this.messageContent, this.recipientId).subscribe({\n          next: response => {\n            console.log('Message sent:', response);\n            this.messages.push(response); // Add the new message to the list\n            this.messageContent = ''; // Clear the input field\n          },\n\n          error: error => console.error('Error sending message:', error)\n        });\n      }\n    }\n    // Set the recipientId when a message is clicked\n    setRecipientId(senderId) {\n      this.recipientId = senderId; // Update the recipientId to the clicked message's sender ID\n    }\n    static #_ = this.ɵfac = function ChatComponent_Factory(t) {\n      return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.ChatService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatComponent,\n      selectors: [[\"app-chat\"]],\n      decls: 15,\n      vars: 4,\n      consts: [[1, \"chat-container\"], [1, \"messages-list\"], [\"class\", \"message-item\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"message-form\"], [\"type\", \"text\", \"placeholder\", \"Enter your message\", 1, \"form-control\", \"mb-2\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"number\", \"placeholder\", \"Recipient User ID\", 1, \"form-control\", \"mb-2\", 3, \"ngModel\", \"readonly\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"message-item\", 3, \"click\"], [1, \"message-header\"], [1, \"message-date\"], [1, \"message-content\"]],\n      template: function ChatComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Chat\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 1)(4, \"h3\");\n          i0.ɵɵtext(5, \"Messages:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"ul\");\n          i0.ɵɵtemplate(7, ChatComponent_li_7_Template, 12, 7, \"li\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"div\", 3)(9, \"h3\");\n          i0.ɵɵtext(10, \"Send a Message:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"input\", 4);\n          i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_11_listener($event) {\n            return ctx.messageContent = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"input\", 5);\n          i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_12_listener($event) {\n            return ctx.recipientId = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_13_listener() {\n            return ctx.sendMessage();\n          });\n          i0.ɵɵtext(14, \"Send\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.messageContent);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngModel\", ctx.recipientId)(\"readonly\", true);\n        }\n      },\n      dependencies: [i3.NgForOf, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.NgModel, i3.DatePipe],\n      styles: [\".chat-container[_ngcontent-%COMP%]{max-width:600px;margin:0 auto;padding:1rem;border:1px solid #ddd;border-radius:5px;background:#f9f9f9}.chat-container[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{text-align:center;margin-bottom:1rem}.chat-container[_ngcontent-%COMP%]   .messages-list[_ngcontent-%COMP%]{margin-bottom:1rem}.chat-container[_ngcontent-%COMP%]   .messages-list[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin-bottom:.5rem}.chat-container[_ngcontent-%COMP%]   .messages-list[_ngcontent-%COMP%]   .message-item[_ngcontent-%COMP%]{padding:.5rem;margin-bottom:.5rem;border:1px solid #ccc;border-radius:5px;background:#fff}.chat-container[_ngcontent-%COMP%]   .messages-list[_ngcontent-%COMP%]   .message-item[_ngcontent-%COMP%]   .message-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;font-size:.9rem;color:#555}.chat-container[_ngcontent-%COMP%]   .messages-list[_ngcontent-%COMP%]   .message-item[_ngcontent-%COMP%]   .message-header[_ngcontent-%COMP%]   .message-date[_ngcontent-%COMP%]{font-style:italic;font-size:.8rem}.chat-container[_ngcontent-%COMP%]   .messages-list[_ngcontent-%COMP%]   .message-item[_ngcontent-%COMP%]   .message-content[_ngcontent-%COMP%]{margin-top:.5rem;font-size:1rem}.chat-container[_ngcontent-%COMP%]   .message-form[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%], .chat-container[_ngcontent-%COMP%]   .message-form[_ngcontent-%COMP%]   .form-control[_ngcontent-%COMP%]{margin-bottom:.5rem}.chat-container[_ngcontent-%COMP%]   .message-form[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{display:block;width:100%}\"]\n    });\n  }\n  return ChatComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}