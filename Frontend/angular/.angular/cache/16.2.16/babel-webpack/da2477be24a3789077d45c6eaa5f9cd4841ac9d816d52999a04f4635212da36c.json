{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LogementService = /*#__PURE__*/(() => {\n  class LogementService {\n    constructor(http) {\n      this.http = http;\n      this.url = `${environment.apiURL}`;\n    }\n    getAuthHeaders() {\n      const token = localStorage.getItem('token');\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: token ? `Bearer ${token}` : ''\n      });\n    }\n    handleError(error) {\n      let errorMessage = 'An unknown error occurred!';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Backend error\n        errorMessage = `Server returned code: ${error.status}, error message is: ${error.message}`;\n      }\n      return throwError(errorMessage);\n    }\n    createLogement(name, address) {\n      return this.http.post(`${this.url}/logements?name=${name}&address=${address}`, {}, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    addUserToLogement(userEmail) {\n      return this.http.post(`${this.url}/logements/users?email=${userEmail}`, {}, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    deleteUserFromLogement(userId) {\n      return this.http.delete(`${this.url}/logements/users/${userId}`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    getAllLogements() {\n      return this.http.get(this.url + '/logements', {\n        headers: this.getAuthHeaders()\n      });\n    }\n    getLogementPersonnel() {\n      return this.http.get(`${this.url}/logements/me/logement-personnel`, {\n        headers: this.getAuthHeaders()\n      });\n    }\n    getLogementPersonnelForCurrentUser() {\n      return this.http.get(`${this.url}/logements/me/logement-personnel`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    deleteLogement(logementId) {\n      return this.http.delete(`${this.url}/logements/${logementId}`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    getLogementMessages() {\n      return this.http.get(`${this.url}/chats/mylogement/messages`, {\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    // Send a message to the current user's logement\n    sendMessageToLogement(chatMessage) {\n      const params = {\n        chatMessage\n      }; // Add chatMessage as query parameter\n      return this.http.post(`${this.url}/chats`, {}, {\n        params,\n        headers: this.getAuthHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    static #_ = this.ɵfac = function LogementService_Factory(t) {\n      return new (t || LogementService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LogementService,\n      factory: LogementService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return LogementService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}