{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.url = environment.apiURL;\n  }\n  // Method to get the JWT token from localStorage\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': token ? `Bearer ${token}` : ''\n    });\n  }\n  getAllTenant() {\n    return this.http.get(`${this.url}/auth/all-tenants`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getUserByEmail(email) {\n    return this.http.get(`${this.url}/auth/user-by-email/${email}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getCompanyByEmail(email) {\n    return this.http.get(`${this.url}/auth/user-by-email/${email}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getAllOwner() {\n    return this.http.get(`${this.url}/auth/all-owners`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  deleteUser(id) {\n    return this.http.delete(`${this.url}/auth/delete-user/${id}`, {\n      responseType: 'text',\n      headers: this.getAuthHeaders()\n    });\n  }\n  getUserById(id) {\n    return this.http.get(`${this.url}/auth/user-by-id/${id}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  updateUser(data, id) {\n    return this.http.post(`${this.url}/auth/update-user/${id}`, data, {\n      responseType: 'text',\n      headers: this.getAuthHeaders()\n    });\n  }\n  static #_ = this.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","AdminService","constructor","http","url","apiURL","getAuthHeaders","token","localStorage","getItem","getAllTenant","get","headers","getUserByEmail","email","getCompanyByEmail","getAllOwner","deleteUser","id","delete","responseType","getUserById","updateUser","data","post","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["G:\\Bureau\\Bureau\\Projet Web\\Frontend\\angular\\src\\app\\Services\\admin.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n  url = environment.apiURL;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Method to get the JWT token from localStorage\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = localStorage.getItem('token');\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': token ? `Bearer ${token}` : ''\r\n    });\r\n  }\r\n\r\n  getAllTenant() {\r\n    return this.http.get(`${this.url}/auth/all-tenants`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getUserByEmail(email: any) {\r\n    return this.http.get(`${this.url}/auth/user-by-email/${email}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getCompanyByEmail(email: any) {\r\n    return this.http.get(`${this.url}/auth/user-by-email/${email}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getAllOwner() {\r\n    return this.http.get(`${this.url}/auth/all-owners`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  deleteUser(id: number) {\r\n    return this.http.delete(`${this.url}/auth/delete-user/${id}`, {\r\n      responseType: 'text',\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  \r\n\r\n  getUserById(id: any) {\r\n    return this.http.get(`${this.url}/auth/user-by-id/${id}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n \r\n\r\n\r\n\r\n  updateUser(data: any, id: any) {\r\n    return this.http.post(`${this.url}/auth/update-user/${id}`, data, {\r\n      responseType: 'text',\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n \r\n}\r\n\r\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,GAAG,GAAGJ,WAAW,CAACK,MAAM;EAEgB;EAExC;EACQC,cAAcA,CAAA;IACpB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAIV,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEQ,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG;KAC9C,CAAC;EACJ;EAEAG,YAAYA,CAAA;IACV,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACP,GAAG,mBAAmB,EAAE;MACnDQ,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EAEAO,cAAcA,CAACC,KAAU;IACvB,OAAO,IAAI,CAACX,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACP,GAAG,uBAAuBU,KAAK,EAAE,EAAE;MAC9DF,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EAEAS,iBAAiBA,CAACD,KAAU;IAC1B,OAAO,IAAI,CAACX,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACP,GAAG,uBAAuBU,KAAK,EAAE,EAAE;MAC9DF,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EAEAU,WAAWA,CAAA;IACT,OAAO,IAAI,CAACb,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACP,GAAG,kBAAkB,EAAE;MAClDQ,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EAEAW,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACf,IAAI,CAACgB,MAAM,CAAC,GAAG,IAAI,CAACf,GAAG,qBAAqBc,EAAE,EAAE,EAAE;MAC5DE,YAAY,EAAE,MAAM;MACpBR,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EAIAe,WAAWA,CAACH,EAAO;IACjB,OAAO,IAAI,CAACf,IAAI,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACP,GAAG,oBAAoBc,EAAE,EAAE,EAAE;MACxDN,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EAMAgB,UAAUA,CAACC,IAAS,EAAEL,EAAO;IAC3B,OAAO,IAAI,CAACf,IAAI,CAACqB,IAAI,CAAC,GAAG,IAAI,CAACpB,GAAG,qBAAqBc,EAAE,EAAE,EAAEK,IAAI,EAAE;MAChEH,YAAY,EAAE,MAAM;MACpBR,OAAO,EAAE,IAAI,CAACN,cAAc;KAC7B,CAAC;EACJ;EAAC,QAAAmB,CAAA,G;qBA9DUxB,YAAY,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ7B,YAAY;IAAA8B,OAAA,EAAZ9B,YAAY,CAAA+B,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}